mean( new_GIG(N = 10000, lambda = 2, psi = 3, chi = 1, eps = 0.9) )

samples = new_GIG(N = 100000, lambda = 2, psi = 3, chi = 1, eps = 0.9)

profvis::profvis(new_GIG(N = 100000, lambda = 2, psi = 3, chi = 1, eps = 0.9))

L.out = 10
par.range = seq(-15, log(1.5), length.out = L.out)
map2_int(
  -(unlist(map(par.range, ~rep(.x, L.out))) %>% exp),
  rep(par.range, L.out) %>% exp,
  ~length(find_cutoff_under_rej_rate(v = .x, b = .y, eps = 0.05))
) %>% matrix(nrow = L.out, ncol = L.out, byrow = F) %>%
  `rownames<-`(sapply(exp(par.range), get_name)) %>%
  `colnames<-`(sapply(exp(par.range), get_name))

get_name <- function(num) {
  if (num > 0.01) return (as.character(round(num, 3)))
  d = 0
  while (num < 1){
    num <- num * 10
    d = d + 1
  }
  return (paste0(as.character(round(num, 2)), "e", as.character(-d)))
}
get_name(0.0012)


## comparison 1 - 1 (time bechmarking) ----
# choose parameter as psi = 0.01, chi = 1, lambda = 0.1
# choose N = {1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000}
# eps = {0.05, 0.1, ..., 0.9, 0.95}
# N = c(1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000)
N = c(1, 3, 10, 30, 100, 300, 1000, 3000, 10000)
eps = exp(seq(from  = -3, to = -0.2, by = 0.5))
# eps = seq(from  = 0.05, to = 0.95, by = 0.05)
results = matrix(0, nrow = length(N) * length(eps), ncol = 3)
count = 1
for(i in seq_along(N)) {
  for(j in seq_along(eps)) {
    ben = rbenchmark::benchmark(
      {
        new_GIG(N = N[i], lambda = 0.1, psi = 0.01, chi = 1, eps = eps[j])
      },
      columns = c("replications", "user.self"),
      replications = 30)
    # store
    results[count, 1] = N[i]
    results[count, 2] = eps[j]
    results[count, 3] = as.numeric( ben[2] / ben[1] / N[i] )
    count = count + 1
    cat(paste0("N = ", N[i], " eps = ", eps[j], "\n"))
  }
}


results = readRDS("comp1-1.rds")
tab = data.frame(results) %>%
  {`colnames<-`}(c("N", "eps", "time")) %>%
  mutate(time = time * 10000) %>%
  pivot_wider(names_from = N, values_from = time)

# plot
min.point = tibble(
  N = as.factor(N),
  e0 = apply(tab, 2, function(x) { eps[which.min(x)] })[-1],
)

data.frame(results) %>%
  {`colnames<-`}(c("N", "eps", "time")) %>%
  mutate(N = as.factor(N),
         time = time * 1000) %>%
  ggplot(aes(x = N, y = eps)) +
  geom_tile(aes(fill = log(time))) +
  scale_fill_gradientn(colours = rainbow(8)) +
  geom_point(data = min.point, aes(x = N, y = e0), size = 3, shape = 15) +
  labs(x = "Sample size N",
       y = "Desired rejection rate", 
       fill = "log(Time)") + 
  theme_classic()



## comparison 1 - 2 (time bechmarking) ----
# choose parameter as psi = 1, chi = 1, lambda = 1
# choose N = {1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 5000, 100000}
# eps = {0.05, 0.1, ..., 0.9, 0.95}

N = c(1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000)
eps = seq(from  = 0.05, to = 0.95, by = 0.05)
results = matrix(0, nrow = length(N) * length(eps), ncol = 3)
count = 1
for(i in seq_along(N)) {
  for(j in seq_along(eps)) {
    ben = rbenchmark::benchmark(
      {
        new_GIG(N = N[i], lambda = 1, psi = 1, chi = 1, eps = eps[j])
      },
      columns = c("replications", "user.self"),
      replications = 30)
    # store
    results[count, 1] = N[i]
    results[count, 2] = eps[j]
    results[count, 3] = as.numeric( ben[2] / ben[1] / N[i] )
    count = count + 1
    cat(paste0("N = ", N[i], " eps = ", eps[j], "\n"))
  }
}

results = readRDS("comp1-2.rds")
tab = data.frame(results) %>%
  {`colnames<-`}(c("N", "eps", "time")) %>%
  mutate(time = time * 10000) %>%
  pivot_wider(names_from = N, values_from = time)

# plot
min.point = tibble(
  N = as.factor(N),
  e0 = apply(tab, 2, function(x) { eps[which.min(x)] })[-1],
)

data.frame(results) %>%
  {`colnames<-`}(c("N", "eps", "time")) %>%
  mutate(N = as.factor(N),
         time = time * 10000) %>%
  ggplot(aes(x = N, y = eps)) +
  geom_tile(aes(fill = log(time))) +
  scale_fill_gradientn(colours = rainbow(8)) +
  geom_point(data = min.point, aes(x = N, y = e0), size = 3, shape = 15) +
  labs(x = "Sample size N",
       y = "Desired rejection rate", 
       fill = "log(Time)") + 
  theme_classic()

## comparison 2 - 1 (rejection constant) ----
# choose parameter as beta in [0.001, 1.5], lambda in [0.001, 1.5]
# choose K = {10, 20, 40, 80, 160, 320}
# find the eps_0 for each point

K = c(10, 20, 40, 80, 160, 320)
beta = seq(from = 0.001, to = 1.5, by = 0.1)
lambda = seq(from = 0.001, to = 1.5, by = 0.1)
results = matrix(0, nrow = length(K) * length(beta) * length(lambda), ncol = 4)
count = 1

for(i in seq_along(lambda)) {
  for(j in seq_along(beta)) {
    for(k in seq_along(K)) {
      samples = new_GIG(50000, lambda = lambda[i], psi = beta[j]^2, chi = 1, K = K[k])
      # store
      results[count, 1] = K[k]
      results[count, 2] = beta[j]
      results[count, 3] = lambda[i]
      results[count, 4] = attributes(samples)[["acc.rate"]]
      cat("K=", K[k], "beta=", beta[j], "lambda=", lambda[i], "count=", count, "\n")
      count = count + 1
    }
  }
}

results = readRDS("comp2.rds")
colnames(results) = c("K", "beta", "lambda", "acc.rate")

limits = c(1, 1.8)

p1 = results %>%
  data.frame() %>%
  filter(K == 10) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()

p2 = results %>%
  data.frame() %>%
  filter(K == 20) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()

p3 = results %>%
  data.frame() %>%
  filter(K == 40) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()

p4 = results %>%
  data.frame() %>%
  filter(K == 80) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()

p5 = results %>%
  data.frame() %>%
  filter(K == 160) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()

p6 = results %>%
  data.frame() %>%
  filter(K == 320) %>%
  ggplot(aes(x = lambda, y = beta)) +
  geom_tile(aes(fill = acc.rate)) +
  scale_fill_gradientn(colours = rainbow(8), limits = limits) +
  labs(fill = "") + 
  theme_classic()
